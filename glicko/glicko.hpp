
// Code generated by stanc v2.28.0
#include <stan/model/model_header.hpp>
namespace glicko_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 34> locations_array__ = 
{" (found before start of program)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 12, column 2 to column 39)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 13, column 2 to column 49)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 14, column 2 to column 23)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 15, column 2 to column 12)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 16, column 2 to column 29)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 21, column 2 to column 29)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 22, column 2 to column 22)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 24, column 2 to column 32)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 26, column 4 to column 64)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 25, column 30 to line 27, column 3)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 25, column 2 to line 27, column 3)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 29, column 2 to column 42)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 31, column 4 to column 61)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 30, column 30 to line 32, column 3)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 30, column 2 to line 32, column 3)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 35, column 4 to line 37, column 6)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 34, column 22 to line 38, column 3)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 34, column 2 to line 38, column 3)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 2, column 2 to column 22)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 3, column 2 to column 24)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 4, column 2 to column 24)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 5, column 25 to column 31)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 5, column 2 to column 33)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 6, column 24 to column 30)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 6, column 2 to column 32)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 7, column 24 to column 30)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 7, column 2 to column 32)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 8, column 30 to column 36)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 8, column 2 to column 38)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 12, column 9 to column 21)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 12, column 23 to column 31)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 13, column 25 to column 37)",
 " (in '/home/mk4139/Glicko2_/glicko/glicko.stan', line 13, column 39 to column 47)"};



class glicko_model final : public model_base_crtp<glicko_model> {

 private:
  int n_game;
  int n_period;
  int n_player;
  std::vector<int> id_period;
  std::vector<int> id_white;
  std::vector<int> id_black;
  std::vector<int> score;
  int gamma_1dim__;
  int sigma_sq_1dim__; 
  
 
 public:
  ~glicko_model() { }
  
  inline std::string model_name() const final { return "glicko_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.0", "stancflags = "};
  }
  
  
  glicko_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "glicko_model_namespace::glicko_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 19;
      context__.validate_dims("data initialization","n_game","int",
           std::vector<size_t>{});
      n_game = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      n_game = context__.vals_i("n_game")[(1 - 1)];
      current_statement__ = 19;
      check_greater_or_equal(function__, "n_game", n_game, 1);
      current_statement__ = 20;
      context__.validate_dims("data initialization","n_period","int",
           std::vector<size_t>{});
      n_period = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      n_period = context__.vals_i("n_period")[(1 - 1)];
      current_statement__ = 20;
      check_greater_or_equal(function__, "n_period", n_period, 1);
      current_statement__ = 21;
      context__.validate_dims("data initialization","n_player","int",
           std::vector<size_t>{});
      n_player = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      n_player = context__.vals_i("n_player")[(1 - 1)];
      current_statement__ = 21;
      check_greater_or_equal(function__, "n_player", n_player, 1);
      current_statement__ = 22;
      validate_non_negative_index("id_period", "n_game", n_game);
      current_statement__ = 23;
      context__.validate_dims("data initialization","id_period","int",
           std::vector<size_t>{static_cast<size_t>(n_game)});
      id_period = std::vector<int>(n_game, std::numeric_limits<int>::min());
      
      current_statement__ = 23;
      id_period = context__.vals_i("id_period");
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= n_game; ++sym1__) {
        current_statement__ = 23;
        check_greater_or_equal(function__, "id_period[sym1__]",
                               id_period[(sym1__ - 1)], 1);
      }
      current_statement__ = 24;
      validate_non_negative_index("id_white", "n_game", n_game);
      current_statement__ = 25;
      context__.validate_dims("data initialization","id_white","int",
           std::vector<size_t>{static_cast<size_t>(n_game)});
      id_white = std::vector<int>(n_game, std::numeric_limits<int>::min());
      
      current_statement__ = 25;
      id_white = context__.vals_i("id_white");
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= n_game; ++sym1__) {
        current_statement__ = 25;
        check_greater_or_equal(function__, "id_white[sym1__]",
                               id_white[(sym1__ - 1)], 1);
      }
      current_statement__ = 26;
      validate_non_negative_index("id_black", "n_game", n_game);
      current_statement__ = 27;
      context__.validate_dims("data initialization","id_black","int",
           std::vector<size_t>{static_cast<size_t>(n_game)});
      id_black = std::vector<int>(n_game, std::numeric_limits<int>::min());
      
      current_statement__ = 27;
      id_black = context__.vals_i("id_black");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= n_game; ++sym1__) {
        current_statement__ = 27;
        check_greater_or_equal(function__, "id_black[sym1__]",
                               id_black[(sym1__ - 1)], 1);
      }
      current_statement__ = 28;
      validate_non_negative_index("score", "n_game", n_game);
      current_statement__ = 29;
      context__.validate_dims("data initialization","score","int",
           std::vector<size_t>{static_cast<size_t>(n_game)});
      score = std::vector<int>(n_game, std::numeric_limits<int>::min());
      
      current_statement__ = 29;
      score = context__.vals_i("score");
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= n_game; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "score[sym1__]",
                               score[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= n_game; ++sym1__) {
        current_statement__ = 29;
        check_less_or_equal(function__, "score[sym1__]", score[(sym1__ - 1)],
                            1);
      }
      current_statement__ = 30;
      gamma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      gamma_1dim__ = (n_period + 1);
      current_statement__ = 30;
      validate_non_negative_index("gamma", "n_period + 1", gamma_1dim__);
      current_statement__ = 31;
      validate_non_negative_index("gamma", "n_player", n_player);
      current_statement__ = 32;
      sigma_sq_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 32;
      sigma_sq_1dim__ = (n_period + 1);
      current_statement__ = 32;
      validate_non_negative_index("sigma_sq", "n_period + 1", sigma_sq_1dim__);
      current_statement__ = 33;
      validate_non_negative_index("sigma_sq", "n_player", n_player);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (gamma_1dim__ * n_player) + (sigma_sq_1dim__ * n_player)
       + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "glicko_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> gamma;
      current_statement__ = 1;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                gamma_1dim__, n_player);
      std::vector<std::vector<local_scalar_t__>> sigma_sq;
      current_statement__ = 2;
      sigma_sq = in__.template read_constrain_lb<std::vector<std::vector<local_scalar_t__>>, jacobian__>(
                   0, lp__, sigma_sq_1dim__, n_player);
      local_scalar_t__ tau_sq;
      current_statement__ = 3;
      tau_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ beta;
      current_statement__ = 4;
      beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ rho;
      current_statement__ = 5;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      {
        current_statement__ = 6;
        lp_accum__.add(inv_gamma_lpdf<propto__>(tau_sq, 4, 1.5));
        current_statement__ = 7;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, 5));
        current_statement__ = 8;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(
            rvalue(sigma_sq, "sigma_sq", index_uni(1)), 4, 2));
        current_statement__ = 11;
        for (int t = 2; t <= (n_period + 1); ++t) {
          current_statement__ = 9;
          lp_accum__.add(
            lognormal_lpdf<propto__>(
              rvalue(sigma_sq, "sigma_sq", index_uni(t)),
              stan::math::log(
                rvalue(sigma_sq, "sigma_sq", index_uni((t - 1)))),
              stan::math::sqrt(tau_sq)));
        }
        current_statement__ = 12;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(gamma, "gamma", index_uni(1)), 0,
            stan::math::sqrt(rvalue(sigma_sq, "sigma_sq", index_uni(1)))));
        current_statement__ = 15;
        for (int t = 2; t <= (n_period + 1); ++t) {
          current_statement__ = 13;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(gamma, "gamma", index_uni(t)),
              multiply(rho, rvalue(gamma, "gamma", index_uni((t - 1)))),
              stan::math::sqrt(rvalue(sigma_sq, "sigma_sq", index_uni(t)))));
        }
        current_statement__ = 18;
        for (int g = 1; g <= n_game; ++g) {
          current_statement__ = 16;
          lp_accum__.add(
            bernoulli_logit_lpmf<propto__>(
              rvalue(score, "score", index_uni(g)),
              ((rvalue(gamma, "gamma",
                  index_uni((rvalue(id_period, "id_period", index_uni(g)) +
                              1)),
                    index_uni(rvalue(id_white, "id_white", index_uni(g)))) -
                 rvalue(gamma, "gamma",
                   index_uni((rvalue(id_period, "id_period", index_uni(g)) +
                               1)),
                     index_uni(rvalue(id_black, "id_black", index_uni(g)))))
                + beta)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "glicko_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> gamma;
      current_statement__ = 1;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                gamma_1dim__, n_player);
      std::vector<std::vector<double>> sigma_sq;
      current_statement__ = 2;
      sigma_sq = in__.template read_constrain_lb<std::vector<std::vector<local_scalar_t__>>, jacobian__>(
                   0, lp__, sigma_sq_1dim__, n_player);
      double tau_sq;
      current_statement__ = 3;
      tau_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double beta;
      current_statement__ = 4;
      beta = in__.template read<local_scalar_t__>();
      double rho;
      current_statement__ = 5;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      out__.write(gamma);
      for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= sigma_sq_1dim__; ++sym2__) {
          out__.write(sigma_sq[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(tau_sq);
      out__.write(beta);
      out__.write(rho);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, -1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, -1>(gamma_1dim__, n_player);
      stan::math::fill(gamma, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= gamma_1dim__; ++sym2__) {
          assign(gamma, in__.read<local_scalar_t__>(),
            "assigning variable gamma", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(gamma);
      std::vector<std::vector<local_scalar_t__>> sigma_sq;
      sigma_sq = std::vector<std::vector<local_scalar_t__>>(sigma_sq_1dim__, std::vector<local_scalar_t__>(n_player, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= sigma_sq_1dim__; ++sym2__) {
          sigma_sq[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>(
                                                   );
        }
      }
      out__.write_free_lb(0, sigma_sq);
      local_scalar_t__ tau_sq;
      tau_sq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_sq);
      local_scalar_t__ beta;
      beta = in__.read<local_scalar_t__>();
      out__.write(beta);
      local_scalar_t__ rho;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"gamma", "sigma_sq", "tau_sq", "beta",
      "rho"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(gamma_1dim__)
                                                                   ,
                                                                   static_cast<size_t>(n_player)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(sigma_sq_1dim__),
                          static_cast<size_t>(n_player)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= gamma_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= sigma_sq_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "sigma_sq" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "tau_sq");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= gamma_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_player; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= sigma_sq_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "sigma_sq" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "tau_sq");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(gamma_1dim__) + ",\"cols\":" + std::to_string(n_player) + "},\"block\":\"parameters\"},{\"name\":\"sigma_sq\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_sq_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_player) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(gamma_1dim__) + ",\"cols\":" + std::to_string(n_player) + "},\"block\":\"parameters\"},{\"name\":\"sigma_sq\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_sq_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_player) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((gamma_1dim__ * n_player) + (sigma_sq_1dim__ * n_player)) + 1) + 1) +
    1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((gamma_1dim__ * n_player) + (sigma_sq_1dim__ * n_player)) + 1) + 1) +
    1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"gamma", "sigma_sq",
   "tau_sq", "beta", "rho"};
     const std::array<Eigen::Index, 5> num_params__{(gamma_1dim__ * n_player)
   , (sigma_sq_1dim__ * n_player), 1, 1, 1};
    
     std::vector<double> params_r_flat__(num_params_r__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < num_params__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(params_r_flat__.size());
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = glicko_model_namespace::glicko_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return glicko_model_namespace::profiles__;
}

#endif


